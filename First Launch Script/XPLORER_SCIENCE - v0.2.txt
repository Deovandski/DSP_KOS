//Xplorer Science Vessel
CLEARSCREEN.

set targetAp to 75000. // Apoapsis
set targetPe to 75000.  // Periapsis
set targetHdg to 90. // Heading 
set targetLaunchPitch to 89. // Desired Pitch at launch

// Vars
set launchSteering to R(targetHdg, targetLaunchPitch, 0).

// Startup 
LOCK STEERING TO UP.
RSC OFF.
SAS OFF.
LIGHTS ON.

PRINT "Xplorer Science Vessel - Automated Vessel Launch to LKO".
PRINT "Deo - Created on 8/6/17".
PRINT "v0.2".
PRINT "Launching in:".
FROM {local countdown is 10.} UNTIL countdown = 0 STEP {SET countdown to countdown - 1.} DO {
    IF countdown = 0 {
            stage.
            PRINT "LAUNCH!".
            WAIT 2.
            CLEARSCREEN.
            LOCK STEERING TO launchSteering.
    } ELSE {
            PRINT countdown.
            WAIT 1.
    }
}

// Main controller.
until ship:Apoapsis >= targetAp {
      CLEARSCREEN.
	if ship:maxthrust = 0 {
            stage.
            print "Performing Staging".
            WAIT 1.
	} else if ship:altitude > 300 and ship:altitude < 700 {
            print "Currently under Avionics Mode #1".
            print "Avionics control under 700m".
            avionicsMasterControl(1).
	} else if ship:altitude >= 700 and ship:altitude < 20000 {
            print "Currently under Avionics Mode #2".
            print "Avionics control between 700m and 20km".
		avionicsMasterControl(2).
	} else if ship:altitude >= 20000 and ship:altitude < 45000 {
            print "Currently under Avionics Mode #3".
            print "Avionics control between 20km and 45km".
		avionicsMasterControl(3).
	} else if ship:altitude >= 45000 {
            print "Currently under Avionics Mode #4".
            print "Avionics control Above 45km".
		avionicsMasterControl(4).
	}.
}.
CLEARSCREEN.
print "Circularization logic...".
print "Nothing here yet :(".
programEND().
// TODO CONTROL AFTER targetAp to circularize



// Functions

// Dynamic control to be done later as I get familiar with it...
function avionicsMasterControl {
      PARAMETER avionicsMode.
      avionicsSpeedControl(avionicsMode).
      avionicsHeadingControl(avionicsMode).
}

// Method for controlling speed
function avionicsSpeedControl {
      PARAMETER incomingMode.
      if incomingMode = 1 {
            avionicsGeneralSpeed(100).
      } else if incomingMode = 2 {
            avionicsGeneralSpeed(300).
      } else if incomingMode = 3 {
            avionicsGeneralSpeed(1000).
      } else if incomingMode = 4 {
            avionicsGeneralSpeed(5000).
      }
}

// Lower modes general control
function avionicsGeneralSpeed{
      PARAMETER MaxVelocity.
      if ship:velocity:surface:mag < MaxVelocity * 0.5 {
            LOCK THROTTLE TO 1.0.
      } else if ship:velocity:surface:mag < MaxVelocity * 0.6 {
            LOCK THROTTLE TO 0.75.
      } else if ship:velocity:surface:mag > MaxVelocity * 0.7 {
            LOCK THROTTLE TO 0.65.
      } else if ship:velocity:surface:mag > MaxVelocity * 0.8 {
            LOCK THROTTLE TO 0.55.
      } else if ship:velocity:surface:mag < MaxVelocity * 0.9 {
            LOCK THROTTLE TO 0.45.
      } else if ship:velocity:surface:mag > MaxVelocity * 0.95 {
            LOCK THROTTLE TO 0.30.
      } else if ship:velocity:surface:mag > MaxVelocity * 0.99 {
            LOCK THROTTLE TO 0.25.
      }
}

// Method for controlling Heading
function avionicsHeadingControl {
  PARAMETER incomingMode.
      if incomingMode = 1 {
            LOCK STEERING TO HEADING(targetHdg, targetLaunchPitch).
      } else if incomingMode = 2 {
            LOCK STEERING TO HEADING(targetHdg, targetLaunchPitch - 25).
      } else if incomingMode = 3 {
            LOCK STEERING TO HEADING(targetHdg, targetLaunchPitch - 45).
      } else if incomingMode = 4 {
            LOCK STEERING TO HEADING(targetHdg, 0).
      }
}

// Program END control
function programEND{
      print "----------------".
      LOCK STEERING TO PROGRADE.
      LOCK THROTTLE TO 0.0.
      print "Program End".
}

ON ABORT {
    PRINT "System Failure!".
}